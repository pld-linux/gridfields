diff -Nur -x .svn tag/pygridfields-0.7/clib/src/abstractcellarray.h gridfields/pygridfields/clib/src/abstractcellarray.h
--- tag/pygridfields-0.7/clib/src/abstractcellarray.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/abstractcellarray.h	2014-05-16 22:54:26.933395072 +0200
@@ -8,10 +8,10 @@
 #include "util.h"
 #include "object.h"
 
-
-using namespace __gnu_cxx;
 using namespace std;
 
+namespace GF {
+
 class UnaryNodeMap;
 class CrossNodeMap;
 
@@ -56,4 +56,6 @@
   virtual vector<Cell> *getCellVector()=0;
 };
 
+} // namespace GF
+
 #endif 
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/access.h gridfields/pygridfields/clib/src/access.h
--- tag/pygridfields-0.7/clib/src/access.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/access.h	2014-05-16 22:54:26.963395071 +0200
@@ -4,10 +4,13 @@
 #include "object.h"
 #include "util.h"
 #include <fcntl.h>
+#include <stdlib.h>
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/mman.h>
 
+namespace GF {
+
 typedef char Byte;
 
 template<class T>
@@ -160,4 +163,7 @@
     MMapIterator &rdr;
 }
 */
+
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/accumulate.cc gridfields/pygridfields/clib/src/accumulate.cc
--- tag/pygridfields-0.7/clib/src/accumulate.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/accumulate.cc	2014-05-16 22:54:27.003395070 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "accumulate.h"
 #include "fparser.hh"
 #include "gridfield.h"
@@ -8,6 +11,8 @@
 #include <vector>
 #include <math.h>
 
+namespace GF {
+
 AccumulateOp::AccumulateOp(GridFieldOperator *op, Dim_t k,
                            string acc,
                            string ex,
@@ -200,3 +205,5 @@
   return retval;
 }
 
+
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/accumulate.h gridfields/pygridfields/clib/src/accumulate.h
--- tag/pygridfields-0.7/clib/src/accumulate.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/accumulate.h	2014-05-16 22:54:27.010061737 +0200
@@ -7,6 +7,8 @@
 #include <ext/functional>
 #include "cell.h"
 
+namespace GF {
+
 class FunctionParser;
 class GridField;
 
@@ -38,4 +40,6 @@
   static double bindVar(GridField *Gg, Dim_t k, std::string var, int i);
 };
 
+} // namespace GF
+
 #endif /* ACCUMULATE_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/aggregate.cc gridfields/pygridfields/clib/src/aggregate.cc
--- tag/pygridfields-0.7/clib/src/aggregate.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/aggregate.cc	2014-05-16 22:54:26.953395071 +0200
@@ -1,8 +1,13 @@
+
+#include "config.h"
+
 #include "aggregate.h"
 #include "timing.h"
 #include <math.h>
 #include "array.h"
 
+namespace GF {
+
 void debug_set(UnTypedPtr p) {
   vector<Tuple *> *vec = (vector<Tuple *> *) p;
   cout << "debug_set: " << vec << ", " << vec->size() << endl;
@@ -107,3 +112,4 @@
   return gname;
 }
 
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/aggregate.h gridfields/pygridfields/clib/src/aggregate.h
--- tag/pygridfields-0.7/clib/src/aggregate.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/aggregate.h	2014-05-16 22:54:26.983395071 +0200
@@ -8,6 +8,8 @@
 #include <ext/functional>
 #include <string>
 
+namespace GF {
+
 //typedef pointer_to_unary_function<Cell, Tuple *> GridFunction;
 
 void debug_set(UnTypedPtr p);
@@ -81,4 +83,6 @@
 
 };
 
+} // namespace GF
+
 #endif /* AGGREGATE_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/aggregations.cc gridfields/pygridfields/clib/src/aggregations.cc
--- tag/pygridfields-0.7/clib/src/aggregations.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/aggregations.cc	2014-05-16 22:54:26.940061738 +0200
@@ -1,4 +1,6 @@
 
+#include "config.h"
+
 #include <math.h>
 #include "aggregations.h"
 
@@ -56,5 +58,4 @@
       //out.set(attrs[j], &val[j]);
       //cout << "val: " << attrs[j] << "=" << *(float*) &val[j]    << endl;
     }
-    
 }
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/aggregations.h gridfields/pygridfields/clib/src/aggregations.h
--- tag/pygridfields-0.7/clib/src/aggregations.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/aggregations.h	2014-05-16 22:54:26.973395071 +0200
@@ -6,6 +6,8 @@
 
 namespace Aggregate {
 
+using namespace GF;
+
 float euclid(float x1, float y1, float x2, float y2);
 float euclid3D(float x1, float y1, float z1, float x2, float y2, float z2);
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/apply.cc gridfields/pygridfields/clib/src/apply.cc
--- tag/pygridfields-0.7/clib/src/apply.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/apply.cc	2014-05-16 22:54:26.980061738 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "apply.h"
 #include "timing.h"
 #include "gridfield.h"
@@ -7,6 +10,8 @@
 #include <sstream>
 #include <math.h>
 
+namespace GF {
+
 /*
 ApplyOp::ApplyOp(GridFieldOperator *op, string tupleexpr, Scheme *outscheme) 
    : UnaryGridFieldOperator(op), unparsedExpr(tupleexpr), _sch(outscheme)
@@ -43,3 +48,6 @@
   return Out;
 }
 
+} // namespace GF
+
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/apply.h gridfields/pygridfields/clib/src/apply.h
--- tag/pygridfields-0.7/clib/src/apply.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/apply.h	2014-05-16 22:54:27.033395070 +0200
@@ -7,6 +7,8 @@
 #include <ext/functional>
 #include <string>
 
+namespace GF {
+
 class ApplyOp : public UnaryGridFieldOperator {
  public:
 //  ApplyOp(GridFieldOperator *op, string tupleexpr, Scheme *outscheme);
@@ -25,4 +27,6 @@
 
 };
 
+} // namespace GF
+
 #endif /* APPLY_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/array.cc gridfields/pygridfields/clib/src/array.cc
--- tag/pygridfields-0.7/clib/src/array.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/array.cc	2014-05-16 22:54:27.026728403 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <iostream>
 #include "array.h"
 #include "access.h"
@@ -8,6 +11,8 @@
 #include <vector>
 using namespace std;
 
+namespace GF {
+
 //#define DEBUG 0
 /*
 Array::Array(string nm, Scheme *sch, int sz) {
@@ -513,6 +518,23 @@
   return NULL;  
 }
 
+
+float Array::getValfloat(int i) {
+//  assert(i<_size);
+  Array *arr;
+  arr = this;
+
+  switch (arr->type) {
+  case FLOAT:
+    return arr->floats[i];
+    break;
+  default:
+    break;
+  }
+
+  return NULL;  
+}
+
 UnTypedPtr Array::getVals() {
   Array *arr;
   arr = this;
@@ -691,3 +713,6 @@
 CArrayIterator<int> __di(__dfi, 0);
 float *__dfp;
 CArrayIterator<float> __df(__dfp, 0);
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/array.h gridfields/pygridfields/clib/src/array.h
--- tag/pygridfields-0.7/clib/src/array.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/array.h	2014-05-16 22:54:26.946728405 +0200
@@ -8,6 +8,8 @@
 #include <vector>
 #include <string>
 
+namespace GF {
+
 class Scheme;
 template <class T> class DatumIterator;
 class Array : public Object {
@@ -56,6 +58,7 @@
   virtual UnTypedPtr getVals();
   virtual UnTypedPtr getValPtr(int i);
   virtual int getValInt(int i);
+  virtual float getValfloat(int i);
 
   virtual inline void next(UnTypedPtr *p) { 
     plusplus(p, type);
@@ -105,4 +108,7 @@
  
 }
 */
+
+} // namespace GF
+
 #endif /* _ARRAY_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/arrayreader.cc gridfields/pygridfields/clib/src/arrayreader.cc
--- tag/pygridfields-0.7/clib/src/arrayreader.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/arrayreader.cc	2014-05-16 22:54:26.930061739 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <fstream>
 #include <stdio.h>
 #include "arrayreader.h"
@@ -9,6 +12,8 @@
 #include <sstream>
 using namespace std;
 
+namespace GF {
+
 ArrayReader::~ArrayReader() {
 }
 
@@ -385,3 +390,5 @@
  pbuf->sputn((char *) array, 32*size);
  return new ArrayReader(ss);
 }
+
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/arrayreader.h gridfields/pygridfields/clib/src/arrayreader.h
--- tag/pygridfields-0.7/clib/src/arrayreader.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/arrayreader.h	2014-05-16 22:54:26.993395071 +0200
@@ -6,7 +6,9 @@
 
 #include <fstream>
 
-using namespace std;
+//using namespace std;
+
+namespace GF {
 
 class Array;
 class Grid;
@@ -104,4 +106,7 @@
   TextFileArrayReader(string fn, long off)
       : FileArrayReader(fn, off) {};
 };
+
+} // namespace GF
+
 #endif /* _ARRAYREADER_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/arraywriter.cc gridfields/pygridfields/clib/src/arraywriter.cc
--- tag/pygridfields-0.7/clib/src/arraywriter.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/arraywriter.cc	2014-05-16 22:54:26.940061738 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <fstream>
 #include <stdio.h>
 #include <map>
@@ -9,6 +12,8 @@
 
 using namespace std;
 
+namespace GF {
+
 ArrayWriter::ArrayWriter(string fn, long off) {
   filename = fn;
   offset = off;
@@ -151,3 +156,5 @@
   */
   delete [] positions;
 }
+
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/arraywriter.h gridfields/pygridfields/clib/src/arraywriter.h
--- tag/pygridfields-0.7/clib/src/arraywriter.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/arraywriter.h	2014-05-16 22:54:26.943395072 +0200
@@ -4,8 +4,9 @@
 #include <string>
 #include "dataset.h"
 
+//using namespace std;
 
-using namespace std;
+namespace GF {
 
 class Array;
 class Grid;
@@ -28,4 +29,6 @@
   void setOffset(long off);
 };
 
+} // namespace GF
+
 #endif /* _ARRAYWRITER_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/assignments.cc gridfields/pygridfields/clib/src/assignments.cc
--- tag/pygridfields-0.7/clib/src/assignments.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/assignments.cc	2014-05-16 22:54:27.016728403 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "assignments.h"
 
 int Assign::pnpoly(int npol, float *xp, float *yp, float x, float y) {
@@ -18,25 +21,27 @@
   return true;
 }
 
-bool Assign::equal(Type t, UnTypedPtr p, UnTypedPtr q) {bool ret;
-      switch (t) {
+bool Assign::equal(Type t, UnTypedPtr p, UnTypedPtr q)
+{
+    bool ret;
+    switch (t) {
         case FLOAT:
-          ret= *(float *)p == *(float *)q;
-          break;
+            ret = *(float *) p == *(float *) q;
+            break;
         case INT:
-          ret= *(int *)p == *(int *)q;
-          break;
+            ret = *(int *) p == *(int *) q;
+            break;
         case OBJ:
-          ret= p == q;
+            ret = p == q;
         case TUPLE:
-          ret= p == q;
-          exit(1);
+            ret = p == q;
+            exit(1);
         case GRIDFIELD:
-          ret= p == q;
-          exit(1);
+            ret = p == q;
+            exit(1);
         default:
-          ret= p==q;
-          exit(1);
-      }
-return ret;}
-
+            ret = p == q;
+            exit(1);
+    }
+    return ret;
+}
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/assignments.h gridfields/pygridfields/clib/src/assignments.h
--- tag/pygridfields-0.7/clib/src/assignments.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/assignments.h	2014-05-16 22:54:27.020061737 +0200
@@ -11,6 +11,8 @@
 
 namespace Assign {
 
+using namespace GF;
+
 bool equal(Type t, UnTypedPtr p, UnTypedPtr q);
 bool TestCallback(long unsigned id, void *arg); 
 int pnpoly(int npol, float *xp, float *yp, float x, float y) ;
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/binarynodemap.h gridfields/pygridfields/clib/src/binarynodemap.h
--- tag/pygridfields-0.7/clib/src/binarynodemap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/binarynodemap.h	2014-05-16 22:54:27.036728403 +0200
@@ -3,6 +3,8 @@
 
 #include "nodemap.h"
 
+namespace GF {
+
 class BinaryNodeMap {
 
  public:
@@ -12,4 +14,6 @@
  private:
 };
 
+} // namespace GF
+
 #endif /* _BINARYNODEMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/bind.cc gridfields/pygridfields/clib/src/bind.cc
--- tag/pygridfields-0.7/clib/src/bind.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/bind.cc	2014-05-16 22:54:26.940061738 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "gridfield.h"
 #include "array.h"
 #include "restrict.h"
@@ -5,6 +8,9 @@
 #include "timing.h"
 #include "bind.h"
 using namespace std;
+
+namespace GF {
+
 BindOp::BindOp(Array *arr, Dim_t k, GridFieldOperator *op) 
  : UnaryGridFieldOperator(op), array(arr), attr(arr->getName()), type(arr->type), 
    reader(NULL), _k(k)
@@ -105,3 +111,5 @@
   Out->ref();
   return Out;
 }
+
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/bindconstant.cc gridfields/pygridfields/clib/src/bindconstant.cc
--- tag/pygridfields-0.7/clib/src/bindconstant.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/bindconstant.cc	2014-05-16 22:54:27.010061737 +0200
@@ -1,8 +1,13 @@
+
+#include "config.h"
+
 #include "gridfield.h"
 #include "constarray.h"
 #include "timing.h"
 #include "bindconstant.h"
 
+namespace GF {
+
 BindConstantOp::BindConstantOp(Dim_t k, const string &attr, float val, 
                                GridFieldOperator *op) 
    : UnaryGridFieldOperator(op), _k(k), attr(attr), val(val)
@@ -35,3 +40,5 @@
   
   return Out;
 }
+
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/bindconstant.h gridfields/pygridfields/clib/src/bindconstant.h
--- tag/pygridfields-0.7/clib/src/bindconstant.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/bindconstant.h	2014-05-16 22:54:27.036728403 +0200
@@ -5,6 +5,8 @@
 #include "array.h"
 #include "gridfieldoperator.h"
 
+namespace GF {
+
 class BindConstantOp : public UnaryGridFieldOperator {
 public:
 //  BindConstantOp(const string &attr, int val, GridFieldOperator *op);
@@ -20,4 +22,6 @@
   float val;
 };
 
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/bind.h gridfields/pygridfields/clib/src/bind.h
--- tag/pygridfields-0.7/clib/src/bind.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/bind.h	2014-05-16 22:54:27.030061737 +0200
@@ -5,6 +5,8 @@
 #include "array.h"
 #include "gridfieldoperator.h"
 
+namespace GF {
+
 class BindOp : public UnaryGridFieldOperator {
 public:
   BindOp(Array *arr, Dim_t k, GridFieldOperator *op);
@@ -36,4 +38,6 @@
 
 };
 
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/cellarray.cc gridfields/pygridfields/clib/src/cellarray.cc
--- tag/pygridfields-0.7/clib/src/cellarray.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/cellarray.cc	2014-05-16 22:54:27.030061737 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "timing.h"
 #include "expr.h"
 #include <assert.h>
@@ -8,6 +11,7 @@
 #include "crossnodemap.h"
 #include "normnodemap.h"
 
+namespace GF {
 
 CellArray::CellArray(Node *celldata, int cellcount) :
             cells(cellcount, Cell(0)),
@@ -114,7 +118,28 @@
   this->UseAdjacencyIndex = true;
 }
 
-
+vector< vector<int> > CellArray::makeArrayInts(){
+  
+  CellArray *arr;
+  
+  arr = this;
+  int i;
+  vector <int> a;
+  //vector<int>* array=new vector<int>;
+  vector< vector<int> > array;
+  cout<<"this1 "<<arr->getsize()<<endl;
+  array.reserve(arr->getsize());
+ for(unsigned int j=0;j<(arr->getsize());j++)
+  {
+   a.reserve(arr->cells.at(j).getsize());
+    for (unsigned int l=0; l<arr->cells.at(j).getsize();l++){//(arr->cells.at(j).getsize()); i++) {
+      a.push_back(arr->cells.at(j).getnodes()[l]);
+    }
+    array.push_back(a);
+    a.clear();
+  }
+  return array;
+}
 
 void CellArray::getAdjacentCells(CellId cid, vector<CellId> &out) {
 
@@ -503,3 +528,6 @@
     delete this;
   }
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/cellarray.h gridfields/pygridfields/clib/src/cellarray.h
--- tag/pygridfields-0.7/clib/src/cellarray.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/cellarray.h	2014-05-16 22:54:26.950061738 +0200
@@ -1,15 +1,21 @@
 #ifndef _CELLARRAY_H
 #define _CELLARRAY_H 
 
+#include <iostream>
+
 #include <vector>
 #include <set>
 #include <map>
 #include <ext/hash_map>
-#include <iostream>
+
+//TODO Switch to unordered_map? jhrg 4/16/12
 
 #include "cell.h"
 #include "abstractcellarray.h"
 
+namespace GF {
+using namespace std;
+using namespace __gnu_cxx;
 
 class CellArray : public AbstractCellArray {
  public:
@@ -38,7 +44,7 @@
   void addCell(Cell &c);
   void addCell(Cell *c);
   Cell *addCellNodes(Node *nodes, int size);
-
+  vector< vector<int> > makeArrayInts();
   Cell *getCell(idx i);
   Cell getCellCopy(idx i);
   Node *getCellNodes(idx i);
@@ -70,7 +76,6 @@
 
   void mapNodes(UnaryNodeMap &h);
   CrossNodeMap makeCrossNodeMap(AbstractCellArray *other);
-
   void buildInvertedIndex();
   void buildIncidenceIndex();
   void buildAdjacencyIndex();
@@ -91,4 +96,6 @@
   bool UseAdjacencyIndex;
 };
 
+} // namespace GF
+
 #endif /* _CELLARRAY_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/cell.cc gridfields/pygridfields/clib/src/cell.cc
--- tag/pygridfields-0.7/clib/src/cell.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/cell.cc	2014-05-16 22:54:27.000061737 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "timing.h"
 #include <assert.h>
 #include <iterator>
@@ -6,6 +9,7 @@
 #include "crossnodemap.h"
 #include "normnodemap.h"
 
+namespace GF {
 
 void Cell::print() const {
   print(0);
@@ -237,3 +241,6 @@
   }
   return true;
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/cell.h gridfields/pygridfields/clib/src/cell.h
--- tag/pygridfields-0.7/clib/src/cell.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/cell.h	2014-05-16 22:54:27.000061737 +0200
@@ -6,7 +6,9 @@
 #include <cmath>
 #include <vector>
 //using namespace __gnu_cxx;
-using namespace std;
+//using namespace std;
+
+namespace GF {
 
 class UnaryNodeMap;
 class CrossNodeMap;
@@ -103,4 +105,6 @@
   }
 };
 
+} // namespace GF
+
 #endif 
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/CmdLine.h gridfields/pygridfields/clib/src/CmdLine.h
--- tag/pygridfields-0.7/clib/src/CmdLine.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/CmdLine.h	2014-05-16 22:54:26.996728404 +0200
@@ -134,6 +134,7 @@
 #include "src/util.h"
 
 using namespace std ;
+using namespace GF;
 
 // handy little container for our argument vector
 struct CCmdParam
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/constarray.cc gridfields/pygridfields/clib/src/constarray.cc
--- tag/pygridfields-0.7/clib/src/constarray.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/constarray.cc	2014-05-16 22:54:26.953395071 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <iostream>
 #include "expr.h"
 #include "tuple.h"
@@ -6,6 +9,7 @@
 
 using namespace std;
 
+namespace GF {
 
 ConstArray::ConstArray(string nm, int sz, Type t, UnTypedPtr constval) 
   : Array(nm.c_str(), t) 
@@ -237,4 +241,7 @@
   } 
 return vals;}
 
+} // namespace GF
+
+
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/constarray.h gridfields/pygridfields/clib/src/constarray.h
--- tag/pygridfields-0.7/clib/src/constarray.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/constarray.h	2014-05-16 22:54:27.013395070 +0200
@@ -5,10 +5,11 @@
 #include "object.h"
 #include "array.h"
 
-
 #include <string>
 
-using namespace std;
+//using namespace std;
+
+namespace GF {
 
 class Scheme;
 
@@ -76,4 +77,6 @@
   Scheme *_sch;
 };
 
+} // namespace GF
+
 #endif /* _ARRAY_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/cross.cc gridfields/pygridfields/clib/src/cross.cc
--- tag/pygridfields-0.7/clib/src/cross.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/cross.cc	2014-05-16 22:54:26.956728405 +0200
@@ -1,9 +1,14 @@
+
+#include "config.h"
+
 #include "cross.h"
 #include "crossordmap.h"
 #include "timing.h"
 #include "array.h"
 
 
+namespace GF {
+
 CrossOp::CrossOp(GridFieldOperator *left, GridFieldOperator *right) {
   this->A = NULL;
   this->B = NULL;
@@ -91,3 +96,6 @@
   return gname;
 }
 
+} // namespace GF
+
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/cross.h gridfields/pygridfields/clib/src/cross.h
--- tag/pygridfields-0.7/clib/src/cross.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/cross.h	2014-05-16 22:54:27.016728403 +0200
@@ -6,6 +6,8 @@
 #include "gridfieldoperator.h"
 #include <string>
 
+namespace GF {
+
 class CrossOp : public BinaryGridFieldOperator {
  public:
   CrossOp(GridFieldOperator *A, GridFieldOperator *B);
@@ -20,4 +22,6 @@
 
 };
 
+} // namespace GF
+
 #endif /* CROSS_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/crossnodemap.h gridfields/pygridfields/clib/src/crossnodemap.h
--- tag/pygridfields-0.7/clib/src/crossnodemap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/crossnodemap.h	2014-05-16 22:54:26.963395071 +0200
@@ -4,6 +4,8 @@
 #include "binarynodemap.h"
 #include "abstractcellarray.h"
 
+namespace GF {
+
 class CrossNodeMap : public BinaryNodeMap {
 
  public: 
@@ -42,4 +44,6 @@
   AbstractCellArray *Bnodes;
 };
 
+} // namespace GF
+
 #endif /* _CROSSNODEMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/crossordmap.h gridfields/pygridfields/clib/src/crossordmap.h
--- tag/pygridfields-0.7/clib/src/crossordmap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/crossordmap.h	2014-05-16 22:54:27.020061737 +0200
@@ -5,6 +5,8 @@
 #include "cellarray.h"
 #include "gridfield.h"
 
+namespace GF {
+
 class CrossOrdMap : public OrdMap {
 
  public: 
@@ -75,4 +77,6 @@
 
 };
 
+} // namespace GF
+
 #endif /* _CROSSORDMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/datadump.cc gridfields/pygridfields/clib/src/datadump.cc
--- tag/pygridfields-0.7/clib/src/datadump.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/datadump.cc	2014-05-16 22:54:26.986728404 +0200
@@ -1,10 +1,15 @@
+
+#include "config.h"
+
 #include "gridfield.h"
-extern "C" {
-#include "stdio.h"
+#include <stdio.h>
+//extern "C" {
+//#include "stdio.h"
 #include "elio.h"
-}
+//}
 #include "expr.h"
 #include "timing.h"
+
 #include <iostream>
 #include <iomanip>
 #include <fstream>
@@ -14,6 +19,8 @@
 
 using namespace std;
 
+namespace GF {
+
 DataDumpOp::DataDumpOp(Dim_t k, string fn, long off, GridFieldOperator *op) 
          : UnaryGridFieldOperator(op), _k(k), filename(fn), offset(off) 
 { }
@@ -44,3 +51,6 @@
      aw.Write(GF->GetDataset(k), string(a->getName()));
    }
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/datadump.h gridfields/pygridfields/clib/src/datadump.h
--- tag/pygridfields-0.7/clib/src/datadump.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/datadump.h	2014-05-16 22:54:26.990061737 +0200
@@ -4,6 +4,8 @@
 #include "gridfieldoperator.h"
 #include <iostream>
 
+namespace GF {
+
 class DataDumpOp : public UnaryGridFieldOperator {
 public:
   DataDumpOp(Dim_t k, string fn, long off, GridFieldOperator *Op);
@@ -19,4 +21,6 @@
   static void writeGridField(GridField *GF, ofstream &f);
 };
 
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/dataset.cc gridfields/pygridfields/clib/src/dataset.cc
--- tag/pygridfields-0.7/clib/src/dataset.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/dataset.cc	2014-05-16 22:54:27.010061737 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "dataset.h"
 #include "array.h"
 #include "util.h"
@@ -5,7 +8,7 @@
 #include <sstream>
 #include <iostream>
 
-
+namespace GF {
 
 Dataset::Dataset(const Scheme &s, size_t N) : _size(N) {
   if (s.size() > 0) {
@@ -472,3 +475,6 @@
 }
 */
 
+} // namespace GF
+
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/dataset.h gridfields/pygridfields/clib/src/dataset.h
--- tag/pygridfields-0.7/clib/src/dataset.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/dataset.h	2014-05-16 22:54:26.953395071 +0200
@@ -5,9 +5,11 @@
 #include "tuple.h"
 #include "util.h"
 
-class Array;
+//using namespace std;
+
+namespace GF {
 
-using namespace std;
+class Array;
 
 class RankedDataset;
 
@@ -73,5 +75,6 @@
   vector<Array *> attributes;
 };
 
+} // namespace GF
 
 #endif /*_DATASET_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/elcircfile.cc gridfields/pygridfields/clib/src/elcircfile.cc
--- tag/pygridfields-0.7/clib/src/elcircfile.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/elcircfile.cc	2014-05-16 22:54:27.023395070 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <fstream>
 #include <stdio.h>
 #include "array.h"
@@ -15,6 +18,8 @@
 
 using namespace std;
 
+namespace GF {
+
 ElcircFile::ElcircFile(string fname) {
   this->filename = fname;
   char *fn = (char *) fname.c_str();
@@ -368,4 +373,7 @@
   return h; 
 }
 
+} // namespace GF
+
+
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/elcircfile.h gridfields/pygridfields/clib/src/elcircfile.h
--- tag/pygridfields-0.7/clib/src/elcircfile.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/elcircfile.h	2014-05-16 22:54:26.966728405 +0200
@@ -4,17 +4,19 @@
 #include <string>
 #include "expr.h"
 #include <stdio.h>
-extern "C" {
+//extern "C" {
 #include "elio.h"
-}
+//}
 #include "arrayreader.h"
 #include "access.h"
 
+//using namespace std;
+
+namespace GF {
+
 class Array;
 class GridField;
 
-using namespace std;
-
 class FileArrayReader;
 
 class ElcircFile {
@@ -52,4 +54,6 @@
   int newid(int node, int *map, int size);
 };
 
+} // namespace GF
+
 #endif /* _ELCIRCFILE_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/elio.h gridfields/pygridfields/clib/src/elio.h
--- tag/pygridfields-0.7/clib/src/elio.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/elio.h	2014-05-16 22:54:26.983395071 +0200
@@ -12,6 +12,10 @@
 #ifndef ELIO_H
 #define ELIO_H
 
+#ifdef __cplusplus
+extern "C" {
+#endif
+
 /*! Error codes. */
 /*! No errors */
 #define ELIO_OK 0 
@@ -296,4 +300,8 @@
 void ElioGetYearDay(double jd, int *y, int *yd, int *h, int *mi, double *sec);
 void ElioSetCorieTime(int b);
 
+#ifdef __cplusplus
+}
+#endif
+
 #endif /* ELIO_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/expr.cc gridfields/pygridfields/clib/src/expr.cc
--- tag/pygridfields-0.7/clib/src/expr.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/expr.cc	2014-05-16 22:54:26.943395072 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <string>
 #include <iostream>
 #include <sstream>
@@ -12,6 +15,7 @@
 
 using namespace std;
 
+namespace GF {
 
 TupleFunction::TupleFunction() {
   SaveReservedWords();
@@ -246,3 +250,6 @@
 
 }
 
+} // namespace GF
+
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/expr.h gridfields/pygridfields/clib/src/expr.h
--- tag/pygridfields-0.7/clib/src/expr.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/expr.h	2014-05-16 22:54:26.976728404 +0200
@@ -4,8 +4,12 @@
 #include "type.h"
 #include "gridfield.h"
 #include "fparser.hh"
+
 #include <ext/hash_map>
 
+namespace GF {
+using namespace __gnu_cxx;  // for hash_map jhrg 4/16/12
+
 class TupleFunction {
   public:
     TupleFunction();
@@ -37,6 +41,8 @@
     hash_map<int, pair<int, FunctionParser *> > out_position_map;
 };
 
+} // namespace GF
+
 #endif /* _EXPR_H */
     
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/fparser.cc gridfields/pygridfields/clib/src/fparser.cc
--- tag/pygridfields-0.7/clib/src/fparser.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/fparser.cc	2014-05-16 22:54:26.933395072 +0200
@@ -2,6 +2,9 @@
 // Function parser v2.8 by Warp
 //==============================
 
+
+#include "config.h"
+
 #include "fparser.hh"
 #include "fpconfig.hh"
 #include "fptypes.hh"
@@ -15,6 +18,8 @@
 
 using namespace std;
 
+namespace GF {
+
 #ifndef M_PI
 #define M_PI 3.1415926535897932384626433832795
 #endif
@@ -1356,3 +1361,6 @@
     // Do nothing if no optimizations are supported.
 }
 #endif
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/grid.cc gridfields/pygridfields/clib/src/grid.cc
--- tag/pygridfields-0.7/clib/src/grid.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/grid.cc	2014-05-16 22:54:27.033395070 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <iostream>
 #include <assert.h>
 #include "grid.h"
@@ -13,6 +16,8 @@
 
 #include <string>
 
+namespace GF {
+
 string testString(const string &s)  { return s; }
 Grid::Grid(string nm, Dim_t d) {
   init(nm, d, new IdOrdMap(this));
@@ -417,3 +422,6 @@
 
   delete ordmap;
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/gridfield.cc gridfields/pygridfields/clib/src/gridfield.cc
--- tag/pygridfields-0.7/clib/src/gridfield.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/gridfield.cc	2014-05-16 22:54:27.013395070 +0200
@@ -1,9 +1,14 @@
+
+#include "config.h"
+
 #include "gridfield.h"
 #include "array.h"
 #include "util.h"
 #include "grid.h"
 #include <string>
 
+namespace GF {
+
 GridField::GridField(Grid *G) : grid(G) {
   this->init(G);
 }
@@ -297,3 +302,6 @@
   *aval = val;
   GridField::Bind(0, arr);
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/gridfield.h gridfields/pygridfields/clib/src/gridfield.h
--- tag/pygridfields-0.7/clib/src/gridfield.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/gridfield.h	2014-05-16 22:54:26.960061738 +0200
@@ -9,6 +9,8 @@
 #include "rankeddataset.h"
 #include "tuple.h"
 
+namespace GF {
+
 class Array;
 
 class GridField : public RankedDataset, public GridFieldOperator {
@@ -74,4 +76,6 @@
     void Bind(const string &name, UnTypedPtr val);
 };
 
+} // namespace GF
+
 #endif /*_GRIDFIELD_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/gridfieldoperator.cc gridfields/pygridfields/clib/src/gridfieldoperator.cc
--- tag/pygridfields-0.7/clib/src/gridfieldoperator.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/gridfieldoperator.cc	2014-05-16 22:54:26.993395071 +0200
@@ -1,10 +1,15 @@
 
+#include "config.h"
+
 #include "timing.h"
 #include <iostream>
 #include "gridfieldoperator.h"
 #include "gridfield.h"
 #include "expr.h"
 using namespace std;
+
+namespace GF {
+
 ZeroaryGridFieldOperator::ZeroaryGridFieldOperator() {};
 
 UnaryGridFieldOperator::UnaryGridFieldOperator(GridFieldOperator *prev) 
@@ -130,3 +135,6 @@
     this->Result->unref();
   }
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/gridfieldoperator.h gridfields/pygridfields/clib/src/gridfieldoperator.h
--- tag/pygridfields-0.7/clib/src/gridfieldoperator.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/gridfieldoperator.h	2014-05-16 22:54:26.940061738 +0200
@@ -3,6 +3,8 @@
 
 #include "object.h"
 
+namespace GF {
+
 class GridField;
 
 //class GridFieldOperator : public Object {
@@ -64,5 +66,6 @@
     GridField *B;
 };
 
+} // namespace GF
 
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/grid.h gridfields/pygridfields/clib/src/grid.h
--- tag/pygridfields-0.7/clib/src/grid.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/grid.h	2014-05-16 22:54:26.980061738 +0200
@@ -12,6 +12,9 @@
 #include "util.h"
 #include "ordmap.h"
 
+namespace GF {
+using namespace std;
+
 class UnaryNodeMap;
 //class OrdMap;
 
@@ -159,5 +162,8 @@
  
 }
 */
+
+} // namespace GF
+
 #endif /* _GRID_H */
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/idnodemap.h gridfields/pygridfields/clib/src/idnodemap.h
--- tag/pygridfields-0.7/clib/src/idnodemap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/idnodemap.h	2014-05-16 22:54:27.023395070 +0200
@@ -3,6 +3,8 @@
 
 #include "unarynodemap.h"
 
+namespace GF {
+
 class IdNodeMap : public UnaryNodeMap {
 
  public: 
@@ -13,4 +15,6 @@
  private:
 };
 
+} // namespace GF
+
 #endif /* _IDNODEMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/idordmap.h gridfields/pygridfields/clib/src/idordmap.h
--- tag/pygridfields-0.7/clib/src/idordmap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/idordmap.h	2014-05-16 22:54:26.990061737 +0200
@@ -3,6 +3,8 @@
 
 #include "ordmap.h"
 
+namespace GF {
+
 class IdOrdMap : public OrdMap {
 
  public: 
@@ -19,4 +21,6 @@
   Grid *G;
 };
 
+} // namespace GF
+
 #endif /* _IDORDMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/implicit0cells.cc gridfields/pygridfields/clib/src/implicit0cells.cc
--- tag/pygridfields-0.7/clib/src/implicit0cells.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/implicit0cells.cc	2014-05-16 22:54:26.973395071 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "implicit0cells.h"
 #include "implicitcrossnodemap.h"
 #include "crossnodemap.h"
@@ -8,6 +11,8 @@
 #include <iterator>
 #include <ext/algorithm> 
 
+namespace GF {
+
 void Implicit0Cells::print() {
   this->print(0);
 }
@@ -167,4 +172,7 @@
   Object::ref();
 }
 
+} // namespace GF
+
+
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/implicit0cells.h gridfields/pygridfields/clib/src/implicit0cells.h
--- tag/pygridfields-0.7/clib/src/implicit0cells.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/implicit0cells.h	2014-05-16 22:54:27.033395070 +0200
@@ -4,7 +4,7 @@
 #include <vector>
 #include <set>
 #include <map>
-#include <ext/hash_map>
+
 #include <iostream>
 #include "cellarray.h"
 #include "cell.h"
@@ -14,6 +14,7 @@
 #define BLOCKSIZ 100
 #define DIGITS 6
 
+namespace GF {
 
 class Implicit0Cells : public AbstractCellArray {
  public:
@@ -30,7 +31,7 @@
   Cell *getCell(idx i);
   Cell getCellCopy(idx i);
   Node *getCellNodes(idx i) { 
-    // Calling this method effetcively destroys the benefits of the implicit array.
+    // Calling this method effectively destroys the benefits of the implicit array.
     // CellArray should inherit from Implicit0Cells, or this method should be removed
     if (materializednodes == NULL) {
       materializednodes = new Node[this->size];
@@ -87,4 +88,6 @@
   unsigned int size;
 };
 
+} // namespace GF
+
 #endif /* _CELLARRAY_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/implicitcrossnodemap.h gridfields/pygridfields/clib/src/implicitcrossnodemap.h
--- tag/pygridfields-0.7/clib/src/implicitcrossnodemap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/implicitcrossnodemap.h	2014-05-16 22:54:26.956728405 +0200
@@ -5,6 +5,8 @@
 #include "abstractcellarray.h"
 #include "implicit0cells.h"
 
+namespace GF {
+
 class ImplicitCrossNodeMap : public CrossNodeMap {
 
  public: 
@@ -39,4 +41,6 @@
   Implicit0Cells *Bnodes;
 };
 
+} // namespace GF
+
 #endif /* _CROSSNODEMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/leftnodemap.h gridfields/pygridfields/clib/src/leftnodemap.h
--- tag/pygridfields-0.7/clib/src/leftnodemap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/leftnodemap.h	2014-05-16 22:54:27.020061737 +0200
@@ -3,6 +3,8 @@
 
 #include "binarynodemap.h"
 
+namespace GF {
+
 class CrossNodeMap : public BinaryNodeMap {
 
  public: 
@@ -14,4 +16,6 @@
  private:
 };
 
+} // namespace GF
+
 #endif /* _LEFTNODEMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/merge.cc gridfields/pygridfields/clib/src/merge.cc
--- tag/pygridfields-0.7/clib/src/merge.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/merge.cc	2014-05-16 22:54:26.960061738 +0200
@@ -1,7 +1,11 @@
+
+#include "config.h"
+
 #include "merge.h"
 #include "array.h"
 #include "timing.h"
 
+namespace GF {
 
 MergeOp::MergeOp(GridFieldOperator *left, GridFieldOperator *right) {
   this->A = NULL;
@@ -57,3 +61,6 @@
   string gname = "m(" + Aname + ", " + Bname + ")";
   return gname;
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/merge.h gridfields/pygridfields/clib/src/merge.h
--- tag/pygridfields-0.7/clib/src/merge.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/merge.h	2014-05-16 22:54:26.963395071 +0200
@@ -2,6 +2,8 @@
 #include "gridfield.h"
 #include "gridfieldoperator.h"
 
+namespace GF {
+
 class MergeOp : public BinaryGridFieldOperator {
  public:
   MergeOp(GridFieldOperator *left, GridFieldOperator *right);
@@ -12,3 +14,4 @@
 
 };
 
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/netcdfadaptor.cc gridfields/pygridfields/clib/src/netcdfadaptor.cc
--- tag/pygridfields-0.7/clib/src/netcdfadaptor.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/netcdfadaptor.cc	2014-05-16 22:54:27.030061737 +0200
@@ -1,9 +1,14 @@
+
+#include "config.h"
+
 #include "netcdfadaptor.h"
 #include "util.h"
 #include "cellarray.h"
 #include "array.h"
 using namespace std;
 
+namespace GF {
+
 Type NetCDFAdaptor::mapType(NcType t) {Type nty=INT;
   switch (t) {
     case ncFloat:
@@ -284,3 +289,6 @@
   var->put(ids, var->edges());
   delete [] ids;
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/netcdfadaptor.h gridfields/pygridfields/clib/src/netcdfadaptor.h
--- tag/pygridfields-0.7/clib/src/netcdfadaptor.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/netcdfadaptor.h	2014-05-16 22:54:26.946728405 +0200
@@ -9,6 +9,8 @@
 #include <string>
 #include <vector>
 
+namespace GF {
+
 class NetCDFAdaptor {
 public:
   NetCDFAdaptor(string fn) : filename(fn), ncdf(NULL) {};
@@ -41,4 +43,7 @@
   string filename;
   NcFile *ncdf;
 };
+
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/nodemap.h gridfields/pygridfields/clib/src/nodemap.h
--- tag/pygridfields-0.7/clib/src/nodemap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/nodemap.h	2014-05-16 22:54:27.006728404 +0200
@@ -3,10 +3,15 @@
 
 #include "type.h"
 
+namespace GF {
+
 class NodeMap {
 
  public:
  private:
 };
 
+
+} // namespace GF
+
 #endif /* _NODEMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/normnodemap.h gridfields/pygridfields/clib/src/normnodemap.h
--- tag/pygridfields-0.7/clib/src/normnodemap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/normnodemap.h	2014-05-16 22:54:27.000061737 +0200
@@ -1,10 +1,14 @@
 #ifndef _NORMNODEMAP_H
 #define _NORMNODEMAP_H
 
+#include <ext/hash_map>
+
 #include "unarynodemap.h"
 #include "cellarray.h"
 #include "assert.h"
 
+namespace GF {
+
 class NormNodeMap : public UnaryNodeMap {
 
  public: 
@@ -36,4 +40,6 @@
   AbstractCellArray *zerocells;
 };
 
+} // namespace GF
+
 #endif /* _CROSSNODEMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/object.h gridfields/pygridfields/clib/src/object.h
--- tag/pygridfields-0.7/clib/src/object.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/object.h	2014-05-16 22:54:26.996728404 +0200
@@ -1,6 +1,8 @@
 #ifndef OBJECT_H
 #define OBJECT_H
 
+namespace GF {
+
 // manual reference counting for shared objects
 // We can replace this with a smart pointer implementation at some point.
 class Object {
@@ -47,5 +49,6 @@
   protected:
 };
 
+} // namespace GF
 
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/onegrid.h gridfields/pygridfields/clib/src/onegrid.h
--- tag/pygridfields-0.7/clib/src/onegrid.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/onegrid.h	2014-05-16 22:54:27.036728403 +0200
@@ -8,6 +8,8 @@
  *
  */
 
+namespace GF {
+
 class OneGrid : public Grid {
 
  public:
@@ -35,4 +37,7 @@
       this->ref();
     };
 };
+
+} // namespace GF
+
 #endif /*  _ONEGRID_H   */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/ordmap.h gridfields/pygridfields/clib/src/ordmap.h
--- tag/pygridfields-0.7/clib/src/ordmap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/ordmap.h	2014-05-16 22:54:27.006728404 +0200
@@ -1,6 +1,8 @@
 #ifndef _ORDMAP_H
 #define _ORDMAP_H
 
+namespace GF {
+
 class Cell;
 
 class OrdMap {
@@ -12,4 +14,6 @@
  private:
 };
 
+} // namespace GF
+
 #endif /* _ORDMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/output.cc gridfields/pygridfields/clib/src/output.cc
--- tag/pygridfields-0.7/clib/src/output.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/output.cc	2014-05-16 22:54:27.020061737 +0200
@@ -1,8 +1,12 @@
+
+#include "config.h"
+
 #include "gridfield.h"
-extern "C" {
-#include "stdio.h"
+#include <stdio.h>
+//extern "C" {
+// #include "stdio.h"
 #include "elio.h"
-}
+//}
 #include "expr.h"
 #include "timing.h"
 #include <iostream>
@@ -18,6 +22,8 @@
 
 using namespace std;
 
+namespace GF {
+
 OutputOp::OutputOp(string fn, GridFieldOperator *op)  
  : UnaryGridFieldOperator(op), offset(0), filename(fn) {
    GF = NULL;
@@ -264,3 +270,6 @@
   f.write((char *) &(h.i23d), sizeof(int));
 }
   */
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/output.h gridfields/pygridfields/clib/src/output.h
--- tag/pygridfields-0.7/clib/src/output.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/output.h	2014-05-16 22:54:26.990061737 +0200
@@ -6,6 +6,8 @@
 //#include "netcdfcpp.h"
 #include <iostream>
 
+namespace GF {
+
 class OutputOp : public UnaryGridFieldOperator {
 public:
   OutputOp(string fn, long off, GridFieldOperator *Op);
@@ -44,4 +46,7 @@
   //static NcVar *putData(Array *a, NcFile *ncdf, long *counts, NcDim **d, int dimcount);
 };
 */
+
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/outputtuples.cc gridfields/pygridfields/clib/src/outputtuples.cc
--- tag/pygridfields-0.7/clib/src/outputtuples.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/outputtuples.cc	2014-05-16 22:54:26.986728404 +0200
@@ -1,8 +1,12 @@
+
+#include "config.h"
+
 #include "gridfield.h"
-extern "C" {
-#include "stdio.h"
+#include <stdio.h>
+//extern "C" {
+//#include "stdio.h"
 #include "elio.h"
-}
+//}
 #include "expr.h"
 #include "timing.h"
 #include <iostream>
@@ -18,6 +22,8 @@
 
 using namespace std;
 
+namespace GF {
+
 OutputTuplesOp::OutputTuplesOp(string fn, GridFieldOperator *op)  
  : UnaryGridFieldOperator(op), offset(0), filename(fn) {
    GF = NULL;
@@ -233,3 +239,6 @@
    f.write((char *) &s, sizeof(int));
    f.write(name.c_str(), name.size());
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/outputtuples.h gridfields/pygridfields/clib/src/outputtuples.h
--- tag/pygridfields-0.7/clib/src/outputtuples.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/outputtuples.h	2014-05-16 22:54:26.926728405 +0200
@@ -5,6 +5,8 @@
 //#include "netcdfcpp.h"
 #include <iostream>
 
+namespace GF {
+
 class OutputTuplesOp : public UnaryGridFieldOperator {
 public:
   OutputTuplesOp(string fn, long off, GridFieldOperator *Op);
@@ -28,4 +30,6 @@
   //static NcVar *putData(Array *a, NcFile *ncdf, long *counts, NcDim **d, int dimcount);
 };
 
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/partition.h gridfields/pygridfields/clib/src/partition.h
--- tag/pygridfields-0.7/clib/src/partition.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/partition.h	2014-05-16 22:54:26.970061738 +0200
@@ -6,6 +6,8 @@
 #include "gridfieldoperator.h"
 #include <string>
 
+namespace GF {
+
 class Stencil {
   /*
   pattern of cells forming an atomic unit for partitioning
@@ -78,4 +80,6 @@
 
 };
 
+} // namespace GF
+
 #endif /* APPLY_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/project.cc gridfields/pygridfields/clib/src/project.cc
--- tag/pygridfields-0.7/clib/src/project.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/project.cc	2014-05-16 22:54:26.936728405 +0200
@@ -1,9 +1,14 @@
+
+#include "config.h"
+
 #include "apply.h"
 #include "timing.h"
 #include "project.h"
 #include "expr.h"
 #include <math.h>
 
+namespace GF {
+
 ProjectOp::ProjectOp(GridFieldOperator *op, Dim_t k, string attribute_list) 
          :  UnaryGridFieldOperator(op),_k(k) 
 {
@@ -39,3 +44,6 @@
   }
   return Out;
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/project.h gridfields/pygridfields/clib/src/project.h
--- tag/pygridfields-0.7/clib/src/project.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/project.h	2014-05-16 22:54:26.970061738 +0200
@@ -10,6 +10,7 @@
 #include <ext/functional>
 #include <string>
 
+namespace GF {
 
 class ProjectOp : public UnaryGridFieldOperator {
  public:
@@ -24,4 +25,6 @@
   vector<string> keepers;
 };
 
+} // namespace GF
+
 #endif /* PROJECT_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/rankeddataset.cc gridfields/pygridfields/clib/src/rankeddataset.cc
--- tag/pygridfields-0.7/clib/src/rankeddataset.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/rankeddataset.cc	2014-05-16 22:54:27.026728403 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "rankeddataset.h"
 #include "dataset.h"
 #include "array.h"
@@ -5,6 +8,8 @@
 #include <sstream>
 #include <iostream>
 
+namespace GF {
+
 UnTypedPtr RankedDataset::GetVoidPointer(const string &attr, Dim_t d) const { 
    if (d<=MaxRank()) {
      return ranks[d].GetVoidPointer(attr);
@@ -102,3 +107,6 @@
     delete this;
   }
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/rankeddataset.h gridfields/pygridfields/clib/src/rankeddataset.h
--- tag/pygridfields-0.7/clib/src/rankeddataset.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/rankeddataset.h	2014-05-16 22:54:26.943395072 +0200
@@ -9,7 +9,9 @@
 #include <iostream>
 #include <string>
 
-using namespace std;
+//using namespace std;
+
+namespace GF {
 
 typedef vector<size_t> Shape;
 
@@ -100,4 +102,6 @@
    vector<Dataset> ranks;
 };
 
+} // namespace GF
+
 #endif /*_RANKEDDATASET_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/refrestrict.cc gridfields/pygridfields/clib/src/refrestrict.cc
--- tag/pygridfields-0.7/clib/src/refrestrict.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/refrestrict.cc	2014-05-16 22:54:26.986728404 +0200
@@ -1,9 +1,14 @@
+
+#include "config.h"
+
 #include "gridfield.h"
 #include "refrestrict.h"
 #include "expr.h"
 #include "ordmap.h"
 #include "subgridordmap.h"
 
+namespace GF {
+
 void RefRestrictOp::Execute() {
   this->PrepareForExecution();
   SubgridOrdMap *ordmap = new SubgridOrdMap(GF->GetGrid());
@@ -19,5 +24,4 @@
   return result;
 }
 
-
-
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/refrestrict.h gridfields/pygridfields/clib/src/refrestrict.h
--- tag/pygridfields-0.7/clib/src/refrestrict.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/refrestrict.h	2014-05-16 22:54:26.960061738 +0200
@@ -1,6 +1,8 @@
 
 #include "restrict.h"
 
+namespace GF {
+
 class RefRestrictOp : public RestrictOp {
 public:
   RefRestrictOp(const string &expr, Dim_t k, GridFieldOperator *GF) : RestrictOp(expr, k, GF) {};
@@ -9,3 +11,4 @@
 
 };
 
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/restrict.cc gridfields/pygridfields/clib/src/restrict.cc
--- tag/pygridfields-0.7/clib/src/restrict.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/restrict.cc	2014-05-16 22:54:26.930061739 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "gridfield.h"
 #include "array.h"
 #include "restrict.h"
@@ -5,6 +8,7 @@
 #include "expr.h"
 #include "timing.h"
 
+namespace GF {
 
 RestrictOp::RestrictOp(string expr, Dim_t k, GridFieldOperator *op) 
  : UnaryGridFieldOperator(op), k(k), expr(expr) 
@@ -73,3 +77,4 @@
   return Out;
 }
 
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/restrict.h gridfields/pygridfields/clib/src/restrict.h
--- tag/pygridfields-0.7/clib/src/restrict.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/restrict.h	2014-05-16 22:54:26.930061739 +0200
@@ -4,6 +4,8 @@
 #include "expr.h"
 #include "gridfieldoperator.h"
 
+namespace GF {
+
 class RestrictOp : public UnaryGridFieldOperator {
 public:
   RestrictOp(string expr, Dim_t k, GridFieldOperator *op);
@@ -18,4 +20,6 @@
  
 };
 
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/scan.h gridfields/pygridfields/clib/src/scan.h
--- tag/pygridfields-0.7/clib/src/scan.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/scan.h	2014-05-16 22:54:26.980061738 +0200
@@ -3,6 +3,8 @@
 
 #include "gridfieldoperator.h"
 
+namespace GF {
+
 class ScanOp : public ZeroaryGridFieldOperator {
 public:
   ScanOp(string filename, long offset)  :
@@ -18,4 +20,6 @@
 
 };
 
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/scaninternal.cc gridfields/pygridfields/clib/src/scaninternal.cc
--- tag/pygridfields-0.7/clib/src/scaninternal.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/scaninternal.cc	2014-05-16 22:54:27.003395070 +0200
@@ -1,7 +1,11 @@
+
+#include "config.h"
+
 #include "gridfield.h"
-extern "C" {
-#include "stdio.h"
-}
+#include <stdio.h>
+//extern "C" {
+//#include "stdio.h"
+//}
 #include "expr.h"
 #include "timing.h"
 #include <iostream>
@@ -14,6 +18,8 @@
 
 using namespace std;
 
+namespace GF {
+
 ScanInternal::ScanInternal(string fn, long offset) : ScanOp(fn, offset) {
   this->bytestream = new ifstream(filename.c_str(), ios_base::binary | ios::in);
 }
@@ -191,3 +197,6 @@
    delete [] name;
    return s;
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/scaninternal.h gridfields/pygridfields/clib/src/scaninternal.h
--- tag/pygridfields-0.7/clib/src/scaninternal.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/scaninternal.h	2014-05-16 22:54:26.950061738 +0200
@@ -6,6 +6,8 @@
 #include <iostream>
 #include <sstream>
 
+namespace GF {
+
 class ScanInternal : public ScanOp {
 public:
   ScanInternal(string fn, long off);
@@ -25,4 +27,6 @@
   std::istream *bytestream;
 };
 
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/sift.cc gridfields/pygridfields/clib/src/sift.cc
--- tag/pygridfields-0.7/clib/src/sift.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/sift.cc	2014-05-16 22:54:27.026728403 +0200
@@ -1,6 +1,10 @@
+
+#include "config.h"
+
 #include "sift.h"
 #include "timing.h"
 
+namespace GF {
 
 SiftOp::SiftOp(Dim_t k, GridFieldOperator *prev) 
   : UnaryGridFieldOperator(prev), _k(k)
@@ -55,3 +59,4 @@
   return Out;
 }
 
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/sift.h gridfields/pygridfields/clib/src/sift.h
--- tag/pygridfields-0.7/clib/src/sift.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/sift.h	2014-05-16 22:54:26.966728405 +0200
@@ -2,6 +2,8 @@
 #include "gridfield.h"
 #include "gridfieldoperator.h"
 
+namespace GF {
+
 class SiftOp : public UnaryGridFieldOperator {
  public:
   SiftOp(Dim_t k, GridFieldOperator *prev);
@@ -13,3 +15,4 @@
 
 };
 
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/subgridordmap.h gridfields/pygridfields/clib/src/subgridordmap.h
--- tag/pygridfields-0.7/clib/src/subgridordmap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/subgridordmap.h	2014-05-16 22:54:27.023395070 +0200
@@ -5,6 +5,8 @@
 #include "grid.h"
 #include "cellarray.h"
 
+namespace GF {
+
 class SubgridOrdMap : public OrdMap {
 
  public: 
@@ -24,4 +26,6 @@
   Grid *Base;
 };
 
+} // namespace GF
+
 #endif /* _SUBGRIDORDMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/timing.cc gridfields/pygridfields/clib/src/timing.cc
--- tag/pygridfields-0.7/clib/src/timing.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/timing.cc	2014-05-16 22:54:26.983395071 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include "timing.h"
 #include <math.h>
 #define DEC 10000
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/tonetcdf.cc gridfields/pygridfields/clib/src/tonetcdf.cc
--- tag/pygridfields-0.7/clib/src/tonetcdf.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/tonetcdf.cc	2014-05-16 22:54:26.936728405 +0200
@@ -1,8 +1,11 @@
+
+#include "config.h"
+
 #include "gridfield.h"
-extern "C" {
-#include "stdio.h"
+//extern "C" {
+#include <stdio.h>
 #include "elio.h"
-}
+//}
 #include "expr.h"
 #include "timing.h"
 #include <iostream>
@@ -23,6 +26,8 @@
 
 using namespace std;
 
+namespace GF {
+
 OutputNetCDFOp::OutputNetCDFOp(string fn, GridFieldOperator *op, 
 		               const Scheme f, const Scheme t)  
  : UnaryGridFieldOperator(op), filename(fn), fixed(f), time(t),  ncdf(NULL) {
@@ -689,3 +694,6 @@
   DEBUG << "Setting Date to " << ds << endl;
   this->datestr = ds;
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/tonetcdf.h gridfields/pygridfields/clib/src/tonetcdf.h
--- tag/pygridfields-0.7/clib/src/tonetcdf.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/tonetcdf.h	2014-05-16 22:54:26.970061738 +0200
@@ -3,9 +3,11 @@
 
 #include "gridfieldoperator.h"
 //#include "elio.h"
-#include "netcdfcpp.h"
+#include <netcdfcpp.h>
 #include <iostream>
 
+namespace GF {
+
 class OutputNetCDFOp : public UnaryGridFieldOperator {
 public:
   OutputNetCDFOp(string fn, GridFieldOperator *Op, const Scheme f, const Scheme t);
@@ -78,4 +80,7 @@
 bool HasDim(NcFile *ncdf, const string dimname);
 bool HasVar(NcFile *ncdf, const string varname);
 bool HasAttr(NcFile *ncdf, const string attr);
+
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/tuple.cc gridfields/pygridfields/clib/src/tuple.cc
--- tag/pygridfields-0.7/clib/src/tuple.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/tuple.cc	2014-05-16 22:54:26.956728405 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <iostream>
 #include <fstream>
 #include <sstream>
@@ -6,6 +9,8 @@
 #include "expr.h"
 #include "util.h"
 
+namespace GF {
+
 Scheme::Scheme() {}
 
 void Scheme::addAttribute(const string &attr, Type type) {
@@ -365,3 +370,6 @@
       break;
   }
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/tuple.h gridfields/pygridfields/clib/src/tuple.h
--- tag/pygridfields-0.7/clib/src/tuple.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/tuple.h	2014-05-16 22:54:27.016728403 +0200
@@ -9,6 +9,8 @@
 
 using namespace std;
 
+namespace GF {
+
 class Scheme {
  public:
   Scheme();
@@ -98,5 +100,6 @@
   TupleData tupledata;
 };
 
+} // namespace GF
 
 #endif /*_TUPLE_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/type.cc gridfields/pygridfields/clib/src/type.cc
--- tag/pygridfields-0.7/clib/src/type.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/type.cc	2014-05-16 22:54:26.950061738 +0200
@@ -1,7 +1,11 @@
+
+#include "config.h"
+
 #include <cstdlib>
 #include "type.h"
 #include "iostream"
 
+namespace GF {
 
 
 char typeformat(Type t) {char nty='f';
@@ -31,3 +35,6 @@
   }
 return nty;
 }
+
+} // namespace GF
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/type.h gridfields/pygridfields/clib/src/type.h
--- tag/pygridfields-0.7/clib/src/type.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/type.h	2014-05-16 22:54:27.003395070 +0200
@@ -3,6 +3,8 @@
 #include <string>
 #include <stdio.h>
 
+namespace GF {
+
 enum e_Tag {VAR=1, VAL};
 typedef enum e_Tag Tag;
 
@@ -42,4 +44,6 @@
     *p = (UnTypedPtr) ((char *) (*p) + typesize(type));
 }; 
 
+} // namespace GF
+
 #endif
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/unarynodemap.cc gridfields/pygridfields/clib/src/unarynodemap.cc
--- tag/pygridfields-0.7/clib/src/unarynodemap.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/unarynodemap.cc	2014-05-16 22:54:26.933395072 +0200
@@ -1,3 +1,10 @@
+
+#include "config.h"
+
 #include "unarynodemap.h"
 
+namespace GF {
+
 class UnaryNodeMap;
+
+} // namespace GF
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/unarynodemap.h gridfields/pygridfields/clib/src/unarynodemap.h
--- tag/pygridfields-0.7/clib/src/unarynodemap.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/unarynodemap.h	2014-05-16 22:54:26.966728405 +0200
@@ -3,6 +3,8 @@
 
 #include "nodemap.h"
 
+namespace GF {
+
 class UnaryNodeMap : public NodeMap {
 
  public:
@@ -11,4 +13,6 @@
  private:
 };
 
+} // namespace GF
+
 #endif /* _UNARYNODEMAP_H */
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/util.cc gridfields/pygridfields/clib/src/util.cc
--- tag/pygridfields-0.7/clib/src/util.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/util.cc	2014-05-16 22:54:26.996728404 +0200
@@ -1,3 +1,6 @@
+
+#include "config.h"
+
 #include <string>
 #include <iostream>
 #include <sstream>
@@ -11,6 +14,8 @@
 
 using namespace std;
 
+namespace GF {
+
 string tab(int indent) {
   string s;
   for (int i=0; i< indent; i++) {
@@ -71,3 +76,6 @@
   return out;
 }
 
+} // namespace GF
+
+
diff -Nur -x .svn tag/pygridfields-0.7/clib/src/util.h gridfields/pygridfields/clib/src/util.h
--- tag/pygridfields-0.7/clib/src/util.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/src/util.h	2014-05-16 22:54:26.946728405 +0200
@@ -1,10 +1,13 @@
 #ifndef _UTIL_H
 #define _UTIL_H
 
-#include <ext/hash_map>
+#include <stdio.h>
+
+#include <iostream>
 #include <vector>
 #include <string>
-#include <stdio.h>
+
+namespace GF {
 
 #define MAX(a,b) ((a)>(b)?(a):(b))
 #define MIN(a,b) ((a)<(b)?(a):(b))
@@ -23,9 +26,11 @@
         copy(from.begin(), from.end(), ii);
 
 
-struct nullstream:
-std::ostream {
-nullstream(): std::ios(0), std::ostream(0) {}
+struct nullstream: std::ostream {
+    nullstream() :
+        std::ios(0), std::ostream(0)
+    {
+    }
 };
 
 #define DEBUG nullstream()
@@ -41,6 +46,9 @@
 
 std::string tab(int indent);
 typedef size_t idx;
+
+} // namespace GF
+
 #endif /* _UTIL_H */
     
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/corierestrict.cc gridfields/pygridfields/clib/tests/corierestrict.cc
--- tag/pygridfields-0.7/clib/tests/corierestrict.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/corierestrict.cc	2014-05-16 22:54:24.400061791 +0200
@@ -4,6 +4,8 @@
 #include "restrict.h"
 #include "elio.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/gfapply.cc gridfields/pygridfields/clib/tests/gfapply.cc
--- tag/pygridfields-0.7/clib/tests/gfapply.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/gfapply.cc	2014-05-16 22:54:24.706728452 +0200
@@ -10,6 +10,8 @@
 string filename;
 string outattr;
 
+using namespace GF;
+
 int main( int argc, char *argv[] ) {
   
   cout << "gfApply..." << flush;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/gfbindvar.cc gridfields/pygridfields/clib/tests/gfbindvar.cc
--- tag/pygridfields-0.7/clib/tests/gfbindvar.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/gfbindvar.cc	2014-05-16 22:54:24.703395118 +0200
@@ -12,6 +12,8 @@
 string sourcefilename;
 int timestep;
 
+using namespace GF;
+
 int main( int argc, char *argv[] ) {
   
   cout << "gfBind..." << flush;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/gfrestrict.cc gridfields/pygridfields/clib/tests/gfrestrict.cc
--- tag/pygridfields-0.7/clib/tests/gfrestrict.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/gfrestrict.cc	2014-05-16 22:54:24.393395125 +0200
@@ -8,6 +8,8 @@
 string opid;
 string predicate;
 
+using namespace GF;
+
 int main( int argc, char *argv[] ) {
   
   cout << "gfRestrict..." << flush;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/gfscan.cc gridfields/pygridfields/clib/tests/gfscan.cc
--- tag/pygridfields-0.7/clib/tests/gfscan.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/gfscan.cc	2014-05-16 22:54:24.700061785 +0200
@@ -10,6 +10,8 @@
 
 char gridLetter;
 
+using namespace GF;
+
 int main( int argc, char *argv[] ) {
   
   cout << "gfScan..." << flush;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/gfview.cc gridfields/pygridfields/clib/tests/gfview.cc
--- tag/pygridfields-0.7/clib/tests/gfview.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/gfview.cc	2014-05-16 22:54:24.696728452 +0200
@@ -10,6 +10,8 @@
 string filename;
 string attribute;
 
+using namespace GF;
+
 void View(string fn);
 void showhelp();
 void checkopts( int argc, char **argv );
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/nested.cc gridfields/pygridfields/clib/tests/nested.cc
--- tag/pygridfields-0.7/clib/tests/nested.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/nested.cc	2014-05-16 22:54:24.720061785 +0200
@@ -17,6 +17,8 @@
 #include "visualize.h"
 #include "vtkGridField.h"
 
+using namespace GF;
+
 int main( int argc, char *argv[] ) {
 
   float vertscale = 20;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/plugin.cc gridfields/pygridfields/clib/tests/plugin.cc
--- tag/pygridfields-0.7/clib/tests/plugin.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/plugin.cc	2014-05-16 22:54:24.380061792 +0200
@@ -17,6 +17,7 @@
 #include "corierecipes.h"
 
 using namespace std;
+using namespace GF;
 
 int main(int argc, char **argv) {
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/plumevol.cc gridfields/pygridfields/clib/tests/plumevol.cc
--- tag/pygridfields-0.7/clib/tests/plumevol.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/plumevol.cc	2014-05-16 22:54:24.706728452 +0200
@@ -1,4 +1,5 @@
 
+using namespace GF;
 
 int plumevol( GridField *H, GridField *V, const char *filename, 
               int addr, string region, string dataprod ) {
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/scalar.cc gridfields/pygridfields/clib/tests/scalar.cc
--- tag/pygridfields-0.7/clib/tests/scalar.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/scalar.cc	2014-05-16 22:54:24.710061785 +0200
@@ -12,6 +12,8 @@
 #include "visualize.h"
 #include "vtkGridField.h"
 
+using namespace GF;
+
 void computeColumnPositions(GridField *H,GridField*V); 
 int scalar3D( GridField *H, GridField *V, const char *filename, 
               int addr, string region, string dataprod);
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/scratch.cc gridfields/pygridfields/clib/tests/scratch.cc
--- tag/pygridfields-0.7/clib/tests/scratch.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/scratch.cc	2014-05-16 22:54:24.696728452 +0200
@@ -19,6 +19,7 @@
 #include "dataprods.h"
 #include "corierecipes.h"
 
+using namespace GF;
 
 int main( int argc, char *argv[] ) {
   cout << setprecision(3);
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testaccess.cc gridfields/pygridfields/clib/tests/testaccess.cc
--- tag/pygridfields-0.7/clib/tests/testaccess.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testaccess.cc	2014-05-16 22:54:24.386728458 +0200
@@ -3,6 +3,7 @@
 #include "access.h"
 
 using namespace std;
+using namespace GF;
 
 int main(int argc, char **argv) {
   
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testaggregate.cc gridfields/pygridfields/clib/tests/testaggregate.cc
--- tag/pygridfields-0.7/clib/tests/testaggregate.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testaggregate.cc	2014-05-16 22:54:24.723395118 +0200
@@ -10,6 +10,8 @@
 #include "src/project.h"
 #include "src/assignments.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale,const string name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testarray.cc gridfields/pygridfields/clib/tests/testarray.cc
--- tag/pygridfields-0.7/clib/tests/testarray.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testarray.cc	2014-05-16 22:54:24.396728458 +0200
@@ -3,6 +3,7 @@
 #include "testarray.h"
 
 using namespace std;
+using namespace GF;
 
 int main(int argc, char **argv) {
   bool verbose = false;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testarray.h gridfields/pygridfields/clib/tests/testarray.h
--- tag/pygridfields-0.7/clib/tests/testarray.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testarray.h	2014-05-16 22:54:24.716728451 +0200
@@ -1,6 +1,8 @@
 #ifndef _TESTARRAY_H
 #define _TESTARRAY_H
 
+using namespace GF;
+
 #include "src/array.h"
 Array *mkTestArray(string name, Type t, int size, int C=5) {
   Array *ca = new Array(name, t, size);
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testarrayreader.cc gridfields/pygridfields/clib/tests/testarrayreader.cc
--- tag/pygridfields-0.7/clib/tests/testarrayreader.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testarrayreader.cc	2014-05-16 22:54:24.703395118 +0200
@@ -16,6 +16,7 @@
 #define TEST_DATA "data/1_flsu.61"
 
 using namespace std;
+using namespace GF;
 
 Grid *makeGrid(int scale, string name);
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testbind.cc gridfields/pygridfields/clib/tests/testbind.cc
--- tag/pygridfields-0.7/clib/tests/testbind.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testbind.cc	2014-05-16 22:54:24.713395118 +0200
@@ -10,6 +10,8 @@
 #include "src/arrayreader.h"
 #include "src/accumulate.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, string name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/test.cc gridfields/pygridfields/clib/tests/test.cc
--- tag/pygridfields-0.7/clib/tests/test.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/test.cc	2014-05-16 22:54:24.716728451 +0200
@@ -3,6 +3,7 @@
 #include <string>
 
 using namespace std;
+using namespace GF;
 
 Agg::Agg(Big *b) {
   this->bigs.push_back(b);
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testcellarray.cc gridfields/pygridfields/clib/tests/testcellarray.cc
--- tag/pygridfields-0.7/clib/tests/testcellarray.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testcellarray.cc	2014-05-16 22:54:24.396728458 +0200
@@ -3,6 +3,8 @@
 #include "src/util.h"
 #include "src/implicitcrossnodemap.h"
 
+using namespace GF;
+
 int main(int argc, char **argv) {
   
   bool verbose = false;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testcross.cc gridfields/pygridfields/clib/tests/testcross.cc
--- tag/pygridfields-0.7/clib/tests/testcross.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testcross.cc	2014-05-16 22:54:24.726728451 +0200
@@ -8,6 +8,8 @@
 #include "src/arrayreader.h"
 #include "src/cross.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testdataset.cc gridfields/pygridfields/clib/tests/testdataset.cc
--- tag/pygridfields-0.7/clib/tests/testdataset.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testdataset.cc	2014-05-16 22:54:24.720061785 +0200
@@ -9,6 +9,7 @@
 #include "testdataset.h"
 
 using namespace std;
+using namespace GF;
 
 int main(int argc, char **argv) {
   
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testdataset.h gridfields/pygridfields/clib/tests/testdataset.h
--- tag/pygridfields-0.7/clib/tests/testdataset.h	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testdataset.h	2014-05-16 22:54:24.723395118 +0200
@@ -1,6 +1,8 @@
 #ifndef _TESTDATASET_H
 #define _TESTDATASET_H
 
+using namespace GF;
+
 #include "testarray.h"
 
 void mkTestDataset(Dataset &D, string sch, int size) {
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testelcirc.cc gridfields/pygridfields/clib/tests/testelcirc.cc
--- tag/pygridfields-0.7/clib/tests/testelcirc.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testelcirc.cc	2014-05-16 22:54:24.703395118 +0200
@@ -32,6 +32,8 @@
 #include "vtkGlyph3D.h"
 #include "vtkSphereSource.h"
 
+using namespace GF;
+
 void testTime() {
   ElcircFile ef("/home/bill/testbed/data/1_salt.63");
   GridField *T = ef.readTGrid();
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testexpr.cc gridfields/pygridfields/clib/tests/testexpr.cc
--- tag/pygridfields-0.7/clib/tests/testexpr.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testexpr.cc	2014-05-16 22:54:24.713395118 +0200
@@ -3,6 +3,7 @@
 #include "expr.h"
 
 using namespace std;
+using namespace GF;
 
 int main(int argc, char **argv) {
   TupleFunction tf;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testgrid.cc gridfields/pygridfields/clib/tests/testgrid.cc
--- tag/pygridfields-0.7/clib/tests/testgrid.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testgrid.cc	2014-05-16 22:54:24.693395119 +0200
@@ -1,6 +1,8 @@
 #include <cstdlib>
 #include "grid.h"
 
+using namespace GF;
+
 Grid *makeGrid(int start, int stop, char *name);
 int main(int argc, char **argv) {
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testgridfield.cc gridfields/pygridfields/clib/tests/testgridfield.cc
--- tag/pygridfields-0.7/clib/tests/testgridfield.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testgridfield.cc	2014-05-16 22:54:24.726728451 +0200
@@ -2,6 +2,8 @@
 #include "src/gridfield.h"
 #include "src/array.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, string name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testjoin.cc gridfields/pygridfields/clib/tests/testjoin.cc
--- tag/pygridfields-0.7/clib/tests/testjoin.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testjoin.cc	2014-05-16 22:54:24.383395125 +0200
@@ -5,6 +5,8 @@
 #include "arrayreader.h"
 #include "join.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testmerge.cc gridfields/pygridfields/clib/tests/testmerge.cc
--- tag/pygridfields-0.7/clib/tests/testmerge.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testmerge.cc	2014-05-16 22:54:24.383395125 +0200
@@ -5,6 +5,8 @@
 #include "src/merge.h"
 #include<cstring>
 
+using namespace GF;
+
 Grid *makeGrid(int scale,const char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testnest.cc gridfields/pygridfields/clib/tests/testnest.cc
--- tag/pygridfields-0.7/clib/tests/testnest.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testnest.cc	2014-05-16 22:54:24.393395125 +0200
@@ -4,6 +4,8 @@
 #include "restrict.h"
 #include "merge.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testnetcdfadaptor.cc gridfields/pygridfields/clib/tests/testnetcdfadaptor.cc
--- tag/pygridfields-0.7/clib/tests/testnetcdfadaptor.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testnetcdfadaptor.cc	2014-05-16 22:54:24.396728458 +0200
@@ -6,6 +6,7 @@
 #include "restrict.h"
 
 using namespace std;
+using namespace GF;
 
 int main(int argc, char **argv) {
   NetCDFAdaptor ncf("example.nc");
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testnetcdf.cc gridfields/pygridfields/clib/tests/testnetcdf.cc
--- tag/pygridfields-0.7/clib/tests/testnetcdf.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testnetcdf.cc	2014-05-16 22:54:24.706728452 +0200
@@ -5,6 +5,8 @@
 #include "src/arraywriter.h"
 #include "src/tonetcdf.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale,const char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testoutput.cc gridfields/pygridfields/clib/tests/testoutput.cc
--- tag/pygridfields-0.7/clib/tests/testoutput.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testoutput.cc	2014-05-16 22:54:24.386728458 +0200
@@ -14,6 +14,7 @@
 #include "src/elcircfile.h"
 #include "src/tonetcdf.h"
 
+using namespace GF;
 
 int main(int argc, char **argv) {
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testregrrid.cc gridfields/pygridfields/clib/tests/testregrrid.cc
--- tag/pygridfields-0.7/clib/tests/testregrrid.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testregrrid.cc	2014-05-16 22:54:24.380061792 +0200
@@ -6,6 +6,8 @@
 #include "arrayreader.h"
 #include "apply.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testrepresent.cc gridfields/pygridfields/clib/tests/testrepresent.cc
--- tag/pygridfields-0.7/clib/tests/testrepresent.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testrepresent.cc	2014-05-16 22:54:24.390061792 +0200
@@ -4,6 +4,8 @@
 #include "restrict.h"
 #include "merge.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testrestrict.cc gridfields/pygridfields/clib/tests/testrestrict.cc
--- tag/pygridfields-0.7/clib/tests/testrestrict.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testrestrict.cc	2014-05-16 22:54:24.700061785 +0200
@@ -7,6 +7,8 @@
 #include "src/arrayreader.h"
 #include "src/apply.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale,const char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testscan.cc gridfields/pygridfields/clib/tests/testscan.cc
--- tag/pygridfields-0.7/clib/tests/testscan.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testscan.cc	2014-05-16 22:54:24.720061785 +0200
@@ -6,6 +6,7 @@
 #include "scanvgrid.h"
 #include "scaninternal.h"
 
+using namespace GF;
 
 int main(int argc, char **argv) {
   //GridField *H = ScanHGridOp::Scan("../../../1_salt.63");
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testsift.cc gridfields/pygridfields/clib/tests/testsift.cc
--- tag/pygridfields-0.7/clib/tests/testsift.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testsift.cc	2014-05-16 22:54:24.390061792 +0200
@@ -3,6 +3,8 @@
 #include "src/array.h"
 #include "src/sift.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale,const char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testsmallrestrict.cc gridfields/pygridfields/clib/tests/testsmallrestrict.cc
--- tag/pygridfields-0.7/clib/tests/testsmallrestrict.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testsmallrestrict.cc	2014-05-16 22:54:24.723395118 +0200
@@ -31,6 +31,7 @@
 #include "vtkGlyph3D.h"
 #include "vtkSphereSource.h"
 
+using namespace GF;
 
 main(int argc, char *argv[]) {
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testsubapply.cc gridfields/pygridfields/clib/tests/testsubapply.cc
--- tag/pygridfields-0.7/clib/tests/testsubapply.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testsubapply.cc	2014-05-16 22:54:24.383395125 +0200
@@ -7,6 +7,8 @@
 #include "accumulate.h"
 #include "bind.h"
 
+using namespace GF;
+
 Grid *makeGrid(int scale, char *name) {
   CellArray *twocells;
   CellArray *onecells;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testtag.cc gridfields/pygridfields/clib/tests/testtag.cc
--- tag/pygridfields-0.7/clib/tests/testtag.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testtag.cc	2014-05-16 22:54:24.393395125 +0200
@@ -32,6 +32,7 @@
 #include "vtkSphereSource.h"
 
 //#include "vmon.h"
+using namespace GF;
 
 GridField *makeMesh() {
   Grid *grid;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testtuple.cc gridfields/pygridfields/clib/tests/testtuple.cc
--- tag/pygridfields-0.7/clib/tests/testtuple.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testtuple.cc	2014-05-16 22:54:24.726728451 +0200
@@ -2,6 +2,8 @@
 #include "src/tuple.h"
 #include "src/expr.h"
 
+using namespace GF;
+
 int main(int argc, char **argv) {
 
   bool verbose = false;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testvis.cc gridfields/pygridfields/clib/tests/testvis.cc
--- tag/pygridfields-0.7/clib/tests/testvis.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testvis.cc	2014-05-16 22:54:24.700061785 +0200
@@ -7,6 +7,8 @@
 #include "restrict.h"
 #include "elcircfile.h"
 
+using namespace GF;
+
 void testSmallRestrict() {
    ElcircFile ef("/home/workspace/ccalmr/hindcasts/2000-01-16/run/1_salt.63");
    GridField *H = ef.readHGrid();
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testvtk.cc gridfields/pygridfields/clib/tests/testvtk.cc
--- tag/pygridfields-0.7/clib/tests/testvtk.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testvtk.cc	2014-05-16 22:54:24.710061785 +0200
@@ -30,6 +30,8 @@
 void CaptureImage(vtkRenderWindow *);
 void ShowCamera(vtkRenderWindow *renWin);
 
+using namespace GF;
+
 class vtkMyCallback : public vtkCommand {
   public:
   static vtkMyCallback *New() { return new vtkMyCallback; }
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/testwrite63.cc gridfields/pygridfields/clib/tests/testwrite63.cc
--- tag/pygridfields-0.7/clib/tests/testwrite63.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/testwrite63.cc	2014-05-16 22:54:24.386728458 +0200
@@ -17,6 +17,7 @@
 #include <sstream>
 
 using namespace std;
+using namespace GF;
 
 int main(int argc, char **argv) {
 
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/transect.cc gridfields/pygridfields/clib/tests/transect.cc
--- tag/pygridfields-0.7/clib/tests/transect.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/transect.cc	2014-05-16 22:54:24.400061791 +0200
@@ -3,6 +3,8 @@
 #include "sift.h"
 #include "vtkUnstructuredGridWriter.h"
 
+using namespace GF;
+
 //defaults
 
 string filename("1_salt.63");
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/transpose.cc gridfields/pygridfields/clib/tests/transpose.cc
--- tag/pygridfields-0.7/clib/tests/transpose.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/transpose.cc	2014-05-16 22:54:24.713395118 +0200
@@ -17,6 +17,8 @@
 #include "visualize.h"
 #include "vtkGridField.h"
 
+using namespace GF;
+
 int main( int argc, char *argv[] ) {
 
   float vertscale = 20;
diff -Nur -x .svn tag/pygridfields-0.7/clib/tests/unopt-scalar.cc gridfields/pygridfields/clib/tests/unopt-scalar.cc
--- tag/pygridfields-0.7/clib/tests/unopt-scalar.cc	2012-02-13 17:46:58.000000000 +0100
+++ gridfields/pygridfields/clib/tests/unopt-scalar.cc	2014-05-16 22:54:24.710061785 +0200
@@ -10,6 +10,8 @@
 #include "visualize.h"
 #include "vtkGridField.h"
 
+using namespace GF;
+
 int main( int argc, char *argv[] ) {
 
   float secs;
